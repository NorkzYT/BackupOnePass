// commitlint.config.js | .commitlintrc.js
/** @type {import('cz-git').UserConfig} */
module.exports = {
	rules: {
		// @see: https://commitlint.js.org/#/reference-rules
		'body-max-length': [2, 'always', Infinity],
		'body-min-length': [2, 'always', 20], // Body should be at least 20 characters

		'footer-leading-blank': [2, 'always'], // Footer should begin with a blank line
		'footer-max-length': [2, 'always', Infinity],
		'footer-min-length': [2, 'always', 0],

		'header-full-stop': [2, 'never', '.'],
		'header-max-length': [2, 'always', 100],
		'header-min-length': [2, 'always', 0],

		'scope-max-length': [2, 'always', Infinity],
		'scope-min-length': [2, 'always', 0],

		'subject-empty': [2, 'never'],
		'subject-full-stop': [2, 'never', '.'],
		'subject-max-length': [2, 'always', 72],
		'subject-min-length': [2, 'always', 0],

		'type-case': [2, 'always', 'lower-case'],
		'type-empty': [2, 'never'],
		'type-enum': [
			2,
			'always',
			[
				'feat',
				'fix',
				'docs',
				'style',
				'refactor',
				'perf',
				'test',
				'build',
				'ci',
				'chore',
				'revert',
			],
		],
		'type-max-length': [2, 'always', Infinity],
		'type-min-length': [2, 'always', 0],
	},
	prompt: {
		alias: { fd: 'docs: fix typos' },
		messages: {
			type: "Select the type of change that you're committing:",
			scope: 'Denote the SCOPE of this change (optional):',
			customScope: 'Denote the SCOPE of this change:',
			subject: 'Write a SHORT, IMPERATIVE tense description of the change:\n',
			body: 'Provide a LONGER description of the change (optional). Use "|" to break new line:\n',
			breaking: 'List any BREAKING CHANGES (optional). Use "|" to break new line:\n',
			footerPrefixSelect: 'Select the ISSUES type of changeList by this change (optional):',
			customFooterPrefix: 'Input ISSUES prefix:',
			footer: 'List any ISSUES by this change. E.g.: #31, #34:\n',
			generatingByAI: 'Generating your AI commit subject...',
			generatedSelectByAI: 'Select suitable subject by AI generated:',
			confirmCommit: 'Are you sure you want to proceed with the commit above?',
		},
		types: [
			{
				value: 'feat',
				name: 'feat:     ‚ú®  A new feature',
				emoji: ':sparkles:',
			},
			{ value: 'fix', name: 'fix:      üêõ  A bug fix', emoji: ':bug:' },
			{
				value: 'docs',
				name: 'docs:     üìù  Documentation only changes',
				emoji: ':memo:',
			},
			{
				value: 'style',
				name: 'style:    üíÑ  Changes that do not affect the meaning of the code',
				emoji: ':lipstick:',
			},
			{
				value: 'refactor',
				name: 'refactor: ‚ôªÔ∏è   A code change that neither fixes a bug nor adds a feature',
				emoji: ':recycle:',
			},
			{
				value: 'perf',
				name: 'perf:     ‚ö°Ô∏è  A code change that improves performance',
				emoji: ':zap:',
			},
			{
				value: 'test',
				name: 'test:     ‚úÖ  Adding missing tests or correcting existing tests',
				emoji: ':white_check_mark:',
			},
			{
				value: 'build',
				name: 'build:    üì¶Ô∏è   Changes that affect the build system or external dependencies',
				emoji: ':package:',
			},
			{
				value: 'ci',
				name: 'ci:       üé°  Changes to our CI configuration files and scripts',
				emoji: ':ferris_wheel:',
			},
			{
				value: 'chore',
				name: "chore:    üî®  Other changes that don't modify src or test files",
				emoji: ':hammer:',
			},
			{
				value: 'revert',
				name: 'revert:   ‚è™Ô∏è  Reverts a previous commit',
				emoji: ':rewind:',
			},
		],
		useEmoji: false,
		emojiAlign: 'left',
		useCommitSignGPG: true,
		useAI: true,
		aiNumber: 1,
		themeColorCode: '',
		scopes: [],
		allowCustomScopes: true,
		allowEmptyScopes: false,
		customScopesAlign: 'bottom',
		customScopesAlias: 'custom',
		emptyScopesAlias: 'empty',
		upperCaseSubject: false,
		markBreakingChangeMode: false,
		allowBreakingChanges: ['feat', 'fix'],
		breaklineNumber: 100,
		breaklineChar: '|',
		skipQuestions: [],
		issuePrefixes: [{ value: 'closed', name: 'closed:   ISSUES has been processed' }],
		customIssuePrefixAlign: 'top',
		emptyIssuePrefixAlias: 'skip',
		customIssuePrefixAlias: 'custom',
		allowCustomIssuePrefix: true,
		allowEmptyIssuePrefix: true,
		confirmColorize: true,
		maxHeaderLength: 60,
		maxSubjectLength: 60,
		minSubjectLength: 0,
		scopeOverrides: undefined,
		defaultBody: '',
		defaultIssues: '',
		defaultScope: '',
		defaultSubject: '',
	},
};
